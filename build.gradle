plugins {
    id 'application'
    id 'scala'
    id 'com.github.maiflai.scalatest' version '0.25'
}


sourceSets {
    test {
        scala { srcDirs = ['src/scala/'] }
    }
    main {
        scala { srcDirs = ['src/scala/'] }
    }
}

repositories { jcenter() }


dependencies {
    implementation 'com.chuusai:shapeless_2.13:2.3.3'
    implementation 'com.fasterxml.jackson.module:jackson-module-scala_2.13:2.10.0'
    implementation 'com.github.pathikrit:better-files_2.13:3.8.0'
    implementation 'com.lihaoyi:ammonite-ops_2.13:1.7.4'
    implementation 'com.lihaoyi:requests_2.13:0.2.0'
    implementation 'com.squareup.okhttp3:okhttp:4.2.2'
    implementation 'org.apache.httpcomponents:httpclient:4.5.9'
    implementation 'org.jsoup:jsoup:1.12.1'
    implementation 'org.scala-lang.modules:scala-parser-combinators_2.13:1.1.2'
    implementation 'org.scala-lang.modules:scala-parallel-collections_2.13:0.2.0'
    implementation 'org.scala-lang:scala-dist:2.13.1'
    implementation 'org.scalaz:scalaz-core_2.13:7.3.0-M31'
    implementation 'org.slf4j:slf4j-simple:1.7.25'
    implementation 'org.yaml:snakeyaml:1.25'

    // https://mvnrepository.com/artifact/io.github.java-diff-utils/java-diff-utils
    implementation "io.github.java-diff-utils:java-diff-utils:4.4"
    implementation "com.github.nscala-time:nscala-time_2.13:2.22.0"

    // Unit tests
    implementation 'org.pegdown:pegdown:1.4.2'
    implementation 'org.scalatest:scalatest_2.13:3.0.8'
    implementation 'org.scalactic:scalactic_2.13:3.0.8'
    implementation 'org.scalacheck:scalacheck_2.13:1.14.1'

    testImplementation 'org.pegdown:pegdown:1.4.2'
    testImplementation 'org.scalatest:scalatest_2.13:3.0.8'
    testImplementation 'org.scalactic:scalactic_2.13:3.0.8'
    testImplementation 'org.scalacheck:scalacheck_2.13:1.14.1'
}


compileScala {
    // classpath = classpath.plus(files(compileGroovy.destinationDir))
    scalaCompileOptions.setAdditionalParameters([
        "-Xlint:adapted-args,nullary-unit,inaccessible,nullary-override,infer-any,missing-interpolator,doc-detached,private-shadow,type-parameter-shadow,poly-implicit-overload,option-implicit,delayedinit-select,package-object-classes,stars-align,constant,nonlocal-return,implicit-not-found,serial,valpattern,eta-zero,eta-sam,deprecation",  // warns about unsed imports among other things
        "-feature",
        "-language:dynamics",
        "-language:higherKinds",
        "-language:implicitConversions",
        "-language:reflectiveCalls",
        "-language:existentials",
        "-Wunused:imports,privates,locals",
    ])
}


application {
    mainClassName 'zsh.history.Main'
}


test {
    maxParallelForks = 1
}


tasks.build.dependsOn 'makeScripts'


// ////////////////////////////////////////////////////////////////////////////////


File mkfile(obj) { obj instanceof File ? obj : new File(obj.toString()) }
task makeScripts(type: DefaultTask) {
    String shebang = "#! /usr/bin/env sh\n"
    String root = projectDir.absolutePath
    String pre = ""
    File outFile

    String classpath = sourceSets.main.runtimeClasspath.toList()*.toString().join(":")

    try {
        String opts = mkfile(root + "/.java").text.split("\n").join(" ")
        pre += "\nexport JAVA_OPTS='$opts'\n\n"
    }
    catch(_){}
    outFile = mkfile("-scala")
    outFile.write shebang + pre + "scala -classpath ${classpath}\n"
    outFile.setExecutable(true, true)

    outFile = mkfile("-amm")
    outFile.write shebang + pre + "java -cp ${classpath}:/usr/local/bin/amm ammonite.Main\n"
    outFile.setExecutable(true, true)

    outFile = mkfile("-jshell")
    outFile.write shebang + pre + "jshell --class-path ${classpath}\n"
    outFile.setExecutable(true, true)
}
